/* */ 
"format cjs";
!function(a,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):a.PchVideoPlayer=e()}(this,function(){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},e=function(a,e){if(!(a instanceof e))throw new TypeError("Cannot call a class as a function")},t=function(){function a(a,e){for(var t=0;t<e.length;t++){var s=e[t];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(a,s.key,s)}}return function(e,t,s){return t&&a(e.prototype,t),s&&a(e,s),e}}(),s=function(a,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);a.prototype=Object.create(e&&e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(a,e):a.__proto__=e)},i=function(a,e){if(!a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?a:e},r=function(){function a(){e(this,a),this.eventStack=[],this.firedStack=[]}return t(a,[{key:"on",value:function(a,e){var t=this;return"string"==typeof a&&(a.split(" ").filter(function(a){return""!=a}).forEach(function(a){"function"==typeof e&&(t.eventStack[a]=t.eventStack[a]||[],t.eventStack[a].push(e))}),!0)}},{key:"off",value:function(a){void 0===a?this.eventStack=[]:this.eventStack.splice(this.eventStack.indexOf(a),1)}},{key:"dispatchEvent",value:function(a){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=this.eventStack[a]||[];s.length&&(this.firedStack[a]=!0,s.forEach(function(a){a.call(e,t)}))}},{key:"dispatchOnce",value:function(a,e){return void 0===this.firedStack[a]&&(this.dispatchEvent(a,e),!0)}}]),a}(),n=function(a){function n(){return e(this,n),i(this,(n.__proto__||Object.getPrototypeOf(n)).call(this))}return s(n,r),t(n,[{key:"attachEvents",value:function(){var a=this;this.player.on("adStart",function(e){a.dispatchOnce("adStart",e)}),this.player.on("adBlocker",function(e){a.dispatchOnce("adBlocker",e)}),this.player.on("adImpression",function(e){a.debugMessage(a.messages.adImpression+a.primary+" Tag"),a.adImpression=!0,a.dispatchOnce("adImpression",e)}),this.player.on("adSkipped",function(e){a.dispatchOnce("adSkipped",e)}),this.player.on("adTime",function(e){var t=Math.round(e.duration-e.position);a.dispatchOnce("adTime",t)}),this.player.on("adClick",function(e){a.dispatchOnce("adClick",e)}),this.player.on("adError",function(e){a.ADError(e)}),this.player.on("adComplete",function(e){a.completeFlag=!0,a.debugMessage(a.messages.adComplete),a.dispatchEvent("adComplete",e)}),this.player.on("complete",function(){if(1!=a.adImpression)if(0!=a.adImpression||0!=a.fallBackEnabled){if(0==a.adImpression){if(0==a.fallBackFlag){if(a.fallBackFlag=!0,a.fallBackTime=Date.now(),a.HTMLFirst){if(a.detectFlash(),0==a.isFlashEnabled)return void a.dispatchEvent("noAd");a.flashFallBack()}else a.html5fallback();return}return a.noAd=!0,void a.dispatchEvent("noAd")}}else a.dispatchEvent("noAd");else 1!=a.completeFlag&&(a.debugMessage(a.messages.forceAdComplete),a.dispatchEvent("adComplete","forceComplete"))})}}]),n}(),o=function(){for(var a=!1,e=window.navigator.plugins,t=0;t<e.length;t++)/flash/i.test(e[t].name)&&(a=!0);return a},l={adImpression:"ad impression on ",adComplete:"adComplete",fallBacktoFlash:"flash fallback",htmlFallBack:"HTML5 fallback",noAD:" noAD",forceAdComplete:"force AD Complete",setupParams:" the setup parameters",flashDetected:" flash player detected",flashNotDetected:"flash player not detected",jwplayerScriptError:" JW player script is not available",containerError:"DOM container not found Error",adError:" AD Error ",playContent:"playing content ",fallbackToVideo:"fallback to video"},h=function(a){if(""==a||"string"!=typeof a)return"";var e=a;if(e=e.replace("[referrer_url]",encodeURIComponent(window.location.href)),e=e.replace("[description_url]",encodeURIComponent(window.location.href)),e=e.replace("[timestamp]",Date.now()),void 0!==window.PCHUSER){var t={};t.a=PCHUSER.age||"",t.g=""!=PCHUSER.gender?"m"==PCHUSER.gender||"1"==PCHUSER.gender?"1":"2":"",t.ar=PCHUSER.ageRange||"",t.seg=PCHUSER.segments||"",t.gmt=PCHUSER.gmt||"",t.level=PCHUSER.level||"",t.reglist=PCHUSER.reglist.join()||"";var s="";s="a="+t.a+"&g="+t.g+"&seg="+t.seg+"&gmt="+t.gmt+"&level="+t.level+"&reglist="+t.reglist,e+="&cust_params="+encodeURIComponent(s)}return e},c={flashFallBack:function(){var a=this;this.primary="flash",this.debugMessage(this.messages.fallBacktoFlash),this.selectVastTag(),this.params.advertising&&(this.params.advertising.tag=this.Adtag),this.debugMessage(this.messages.setupParams),this.setupPlayerParams(this.params),jwplayer().on("ready",function(){a.attachEvents(),a.dispatchEvent("fallbackComplete","flash")})},html5fallback:function(){var a=this;this.primary="html5",this.debugMessage(this.messages.htmlFallBack),this.selectVastTag(),this.params.advertising&&(this.params.advertising.tag=this.Adtag),this.debugMessage(this.params),this.setupPlayerParams(this.params),jwplayer().on("ready",function(){a.attachEvents(),a.dispatchEvent("fallbackComplete","HTML5")})},videoFallback:function(){}},d={ADError:function(a){this.debugMessage("error on AD "),this.debugMessage(a),this.dispatchOnce("adError",a)},debugMessage:function(a){0!=this.debugMode&&console.log("PCH Video Message >>>> ",a)},errorHandler:function(a){this.errorFlag=!0,console.log(a)}};return function(r){function p(a){e(this,p);var t=i(this,(p.__proto__||Object.getPrototypeOf(p)).call(this));return t.messages=l,t.eventStack=[],t.firedStack=[],t.noAd=!1,t.fallBackFlag=!1,t.completeFlag=!1,t.fallBackTime=null,t.flashAdEmtpy=!1,t.isFlashEnabled=!1,t.htmlADEmpty=!1,t.errorFlag=!1,t.params=a,t.container=t.params.container,t.AdTagsObj=t.params.adTags,t.primary=window.jwplayer.defaults.primary||"html5",t.fallBackEnabled="flash"===window.jwplayer.defaults.primary,t.client=t.params.adPlugin||"googima",t.Adtag=null,t.fallBackVideo=t.params.fallBackVideo||"",t.adImpression=!1,t.vpaidMode=t.params.vpaidmode||"insecure",t.updateDFPtag=t.params.updateTag||!1,t.adTech={firstTag:"flash",secondTag:"html5"},t.HTMLFirst=t.params.htmlFirst||!1,t.hasFlashTag=!0,t.mute=!0,t.device=t.params.device.toLowerCase()||"mobile",!1!==t.HTMLFirst&&(t.adTech={firstTag:"html5",secondTag:"flash"}),t.debugMode=!(!t.params.debugMode&&!/pchvideodebug=1|.qa.|.stg.|.dev./i.test(window.location.href)),t.params.adTags&&"string"!=typeof t.params.adTags.flashTag&&(t.params.adTags.flashTag=""),t.params.adTags&&"string"!=typeof t.params.adTags.html5Tag&&(t.params.adTags.html5Tag=""),t.hasFlashTag=""!==t.AdTagsObj.flashTag,"flash"!=t.primary||t.hasFlashTag||(t.primary,t.fallBackEnabled=!1),t.updateDFPtag&&(t.hasFlashTag&&(t.params.adTags.flashTag=h(t.params.adTags.flashTag)),t.params.adTags.html5Tag=h(t.params.adTags.html5Tag)),t.setInitialState(),"flash"===t.primary&&0==t.HTMLFirst&&t.detectFlash(),1==t.HTMLFirst&&(t.primary="html5"),t.selectVastTag(),t.setupPlayerParams(t.params),jwplayer().on("ready",function(){t.attachEvents()}),t}return s(p,n),t(p,[{key:"setInitialState",value:function(){null===document.getElementById(this.container)&&this.errorHandler(this.messages.containerError),window.jwplayer?this.player=window.jwplayer(this.container):this.errorHandler(this.messages.jwplayerScriptError),this.primary="desktop"==this.device?this.primary:"html5",this.mute="desktop"!=this.device}},{key:"setupPlayerParams",value:function(e){this.params&&"object"===a(this.params)&&(void 0===this.params.advertising&&0==this.noAd&&(this.params.advertising={client:this.client,vpaidmode:this.vpaidMode,autoplayadsmuted:this.mute,tag:this.Adtag}),void 0===this.params.file&&(this.params.file=this.fallBackVideo),this.debugMessage(this.messages.setupParams),this.debugMessage(this.params),""!=this.params.adTags.flashTag?this.params.advertising.client="flash"==this.primary?"vast":"googima":(this.params.advertising.client=1==this.isFlashEnabled&&"flash"==window.jwplayer.defaults.primary?"vast":"googima",this.primary="html5"),this.params.advertising.client="desktop"==this.device?this.params.advertising.client:"googima",this.player.setup(this.params))}},{key:"detectFlash",value:function(){this.isFlashEnabled=o(),this.isFlashEnabled?this.debugMessage(this.messages.flashDetected):this.debugMessage(this.messages.flashNotDetected),"flash"===this.primary&&!1===this.isFlashEnabled&&this.dispatchEvent("fallbacktohtml5"),this.primary=this.isFlashEnabled?"flash":"html5"}},{key:"selectVastTag",value:function(){this.Adtag="flash"===this.primary&&this.AdTagsObj.flashTag?this.AdTagsObj.flashTag:this.AdTagsObj.html5Tag}},{key:"flashFallBack",get:function(){return c.flashFallBack}},{key:"html5fallback",get:function(){return c.html5fallback}},{key:"ADError",get:function(){return d.ADError}},{key:"debugMessage",get:function(){return d.debugMessage}},{key:"errorHandler",get:function(){return d.errorHandler}}]),p}()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
